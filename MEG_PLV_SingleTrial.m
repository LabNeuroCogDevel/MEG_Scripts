function [ Output ] = MEG_PLV_SingleTrial( Input, trials, source, target, time)
% This function will calculate single trial phase-locking value of MEG source
% timecourses from 2 ROIs. 
%   Usage: [ PLV, timeVec, FOIs ] = MEG_PLV( Input, trilas, source, target, time)
%
%   Input:
%       Input - This has to be output structure generated by MEG_wavelet.
%       trials - vector of trials to be included. Use [] if include all trials. 
%       source - the first ROI number
%       target - the second ROI number
%       time - a 2 element vector of time period of interest [tstart
%              tend]) in seconds.
%
%   Output:
%       Output.PLV = the time-frequency matrix of PLVs, freq x time.
%       Output.timeVec - the time vector
%       Output.FOIs - frequency of interest.
%
%
%   Last update  6.14.2012, by Kai

%find start and end indeces 
tstart = find(min(abs(Input.time-(time(1))))==abs(Input.time-(time(1))));
tend = find(min(abs(Input.time-(time(2))))==abs(Input.time-(time(2))));

if isempty(trials)
    %extract data
    SourceData = squeeze(Input.wav(source,:,:,tstart:tend));
    TargetData = squeeze(Input.wav(target,:,:,tstart:tend));
else
    SourceData = squeeze(Input.wav(source,trials,:,tstart:tend));
    TargetData = squeeze(Input.wav(target,trials,:,tstart:tend));
end

%calculate PLV
% angle(wavelet_coef) will give you phase vector.
% angle(wavelet_coef_from_ROI1 .* conj(wavelet_coef_from_ROI2)) will give phase diff.
% exp(i*(phase)) will convert the complex number vector into unit length.
Output.PLV = squeeze(abs(mean(exp(1i*(angle(SourceData.*conj(TargetData)))),3)));

Output.timeVec = Input.time(tstart:tend);
Output.FOIs = Input.FOIs;
Output.label = Input.label;
Output.trialinfo = Input.trialinfo;
%Output.fsample = input.fsample;
end

